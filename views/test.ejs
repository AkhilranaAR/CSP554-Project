<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <!-- <style>
        img {
            width: 100%;
            height: 100 vh;
        }
    </style> -->
    <title>TEST EJS FILE</title>
</head>

<body class="d-flex flex-column vh-100" style="background-color: #f6f5f3;">

    <div class="container bg-warning p-2 text-dark bg-opacity-10">
        <header class="d-flex py-3 justify-content-md-between border-bottom border-danger border-1">
            <!-- justify-content-center -->
            <p class="text-start fs-3 fw-light">CSP 554</p>
            <p class="text-center fs-3 fw-light">Big Data Technologies</p>
            <p class="text-end fs-3 fw-light">Term Project</p>
        </header>
    </div>

    <div class="container mt-4">

        <!-- <h1>Test .ejs file</h1> -->

        <div class="row">
            <h1 class="fw-light text-center mb-5">GridFS Module</h1>

            <div class="row">
                <div class="col-6 offest-3 shadow p-3 mb-5 bg-white rounded">
                    <!-- border border-dark rounded -->


                    <form action="/upload" method="POST" novalidate class="needs-validation"
                        enctype="multipart/form-data">
                        <div class="mb-3 mt-5 form-group">
                            <label for="title" class="form-label">Enter the Document's name: </label>
                            <input type="text" id="title" class="form-control" placeholder="Enter Name"
                                name="campground[title]" required>
                            <div class="valid-feedback">
                                Looks good!
                            </div>
                        </div>

                        <div class="mb-3 form-group">
                            <label for="campDescription" class="form-label">Enter the Document's Description: </label>
                            <textarea type="text" id="campDescription" class="form-control"
                                placeholder="Enter Description" name="campground[description]" rows="3"
                                required></textarea>
                            <div class="valid-feedback">
                                Looks good!
                            </div>
                        </div>

                        <div class="mb-3 form-group">
                            <label for="formControlFile1" class="form-label">Upload Document: </label>
                            <input type="file" class="form-control-file" id="formControlFile1" name="doc">
                        </div>

                        <button type="submit" class="btn btn-primary mb-3">Submit</button>

                    </form>

                    <button type="button" onclick="window.location.href='/campgrounds';" class="btn btn-warning">Back to
                        All
                        Documents</button>

                </div>

                <div class="col-6 mb-5">
                    <div class="form-floating shadow">
                        <textarea class="form-control" placeholder="Document metadata" id="floatingTextarea2"
                            style="height: 450px">

                            <% for(let chunk of chunks) { %>
                                <p><%= chunk.length %> </p>
                            
                            <% } %>

                            </textarea>
                        <label for="floatingTextarea2">Metadata</label>
                    </div>
                </div>
            </div>


            <hr>

            <% if(docs){ %>
                <% docs.forEach(function(doc) { %>
                    <div class="card card-body mb-3">
                        <% if(doc.isImage) { %>
                            <!-- <%function openImg() {%>
                                <% var image=document.getElementById('image');%>
                                    <% var source=image.src;%>
                                        <% window.open(source);%>
                                            <%}%> -->

                            <img src="image/<%= doc.filename %>" id="image" alt="">

                            <% } else { %>
                                <%= doc.filename %>
                                    <% } %>
                                        <form method="POST" action="/documents/<%= doc._id %>?_method=DELETE">
                                            <button class="btn btn-danger btn-block mt-4">Delete</button>
                                            <button type="button"
                                                onclick="window.location.href='http://www.unsplash.com';"
                                                class="btn btn-dark btn-block mt-4"> Image Source
                                            </button>
                                        </form>
                    </div>
                    <% }) %>
                        <% } else { %>
                            <p>No documents to show</p>
                            <% } %>
        </div>
    </div>




    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js"
        integrity="sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js"
        integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13"
        crossorigin="anonymous"></script>

    <script>
        (function () {
            'use strict'

            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            const forms = document.querySelectorAll('.needs-validation')
            // I think "forms" is a NodeList ??

            // Loop over them and prevent submission
            Array.prototype.slice.call(forms)
                // Array.prototype.slice.call() is defined below inside this script only:
                // a.k.a in ES6 as Array.from() which is a static method on Array object.
                .forEach(function (form) {
                    form.addEventListener('submit', function (event) {
                        if (!form.checkValidity()) {
                            event.preventDefault()
                            event.stopPropagation()
                        }
                        // After preventing the default action of the browser for the form validation
                        // bootstrap's CSS file including the pseudo-classes for <input> etc comes to picture.
                        form.classList.add('was-validated')
                    }, false)
                })
        })()
                // Array.prototype.slice is the method on Array and returns an array by going over the argument
                // passed to it. The argument can be a array-like object (with length property or indexed) or 
                // a iterable object. 

                // In JavaScript, methods of an object can be bound to another object at runtime. In short, javascript
                // allows an object to "borrow" the method of another object: Example:
                // object1 = {
                //     name: 'Frank',
                //     greet() {
                //         alert(`Hello ${this.name}`);
                //     }
                // };

                // object2 = {
                //     name: 'Andy'
                // };

                // //   Note that object2 has no greet method,
                // //    but we may "borrow" from object1:

                // object1.greet.call(object2); // Will show an alert with 'Hello Andy'

                // The call and apply methods of function objects (in JavaScript, functions are objects as well) 
                // allows you to do this. So, in your code you could say that the NodeList is borrowing an array's 
                // slice method. .slice() returns another array as its result, which will become the "converted" array 
                // that you can then use.
    </script>

</body>

</html>